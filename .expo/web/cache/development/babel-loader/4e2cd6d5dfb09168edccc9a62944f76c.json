{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/frontend/Documents/clones/native/WhatsappCloneReactNative/screens/ChatRoomScreen.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { useRoute } from '@react-navigation/native';\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { messagesByChatRoom } from \"./queries\";\nimport { onCreateMessage } from \"../graphql/subscriptions\";\nimport ChatMessage from \"../components/ChatMessage\";\nimport BG from \"../assets/images/BG.png\";\nimport InputBox from \"../components/InputBox\";\n\nvar ChatRoomScreen = function ChatRoomScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myId = _useState4[0],\n      setMyId = _useState4[1];\n\n  var route = useRoute();\n\n  var fetchMessages = function fetchMessages() {\n    var messagesData;\n    return _regeneratorRuntime.async(function fetchMessages$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(messagesByChatRoom, {\n              chatRoomID: route.params.id,\n              sortDirection: \"DESC\"\n            })));\n\n          case 2:\n            messagesData = _context.sent;\n            setMessages(messagesData.data.messagesByChatRoom.items);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchMessages();\n  }, []);\n  useEffect(function () {\n    var getMyId = function getMyId() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getMyId$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context2.sent;\n              setMyId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getMyId();\n  }, []);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: function next(data) {\n        var newMessage = data.value.data.onCreateMessage;\n\n        if (newMessage.chatRoomID !== route.params.id) {\n          console.log(\"Message is in another room!\");\n          return;\n        }\n\n        fetchMessages();\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n  return React.createElement(ImageBackground, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    source: BG,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: messages,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(ChatMessage, {\n        myId: myId,\n        message: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 35\n        }\n      });\n    },\n    inverted: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), React.createElement(InputBox, {\n    chatRoomID: route.params.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChatRoomScreen;","map":{"version":3,"sources":["/Users/frontend/Documents/clones/native/WhatsappCloneReactNative/screens/ChatRoomScreen.tsx"],"names":["React","useEffect","useState","useRoute","API","graphqlOperation","Auth","messagesByChatRoom","onCreateMessage","ChatMessage","BG","InputBox","ChatRoomScreen","messages","setMessages","myId","setMyId","route","fetchMessages","graphql","chatRoomID","params","id","sortDirection","messagesData","data","items","getMyId","currentAuthenticatedUser","userInfo","attributes","sub","subscription","subscribe","next","newMessage","value","console","log","unsubscribe","width","height","item"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {FlatList, Text, ImageBackground, KeyboardAvoidingView } from 'react-native';\n\nimport { useRoute } from '@react-navigation/native';\nimport {\n  API,\n  graphqlOperation,\n  Auth,\n} from 'aws-amplify';\n\nimport { messagesByChatRoom } from './queries';\nimport { onCreateMessage } from '../graphql/subscriptions';\n\n\nimport ChatMessage from \"../components/ChatMessage\";\nimport BG from '../assets/images/BG.png';\nimport InputBox from \"../components/InputBox\";\n\nconst ChatRoomScreen = () => {\n\n  const [messages, setMessages] = useState([]);\n  const [myId, setMyId] = useState(null);\n\n  const route = useRoute();\n\n  //fetch messages\n  const fetchMessages = async () => {\n    const messagesData = await API.graphql(\n      graphqlOperation(\n        messagesByChatRoom, {\n          chatRoomID: route.params.id,\n          sortDirection: \"DESC\",\n        }\n      )\n    )\n    setMessages(messagesData.data.messagesByChatRoom.items);\n  }\n\n  //get messages on render\n  useEffect(() => {\n    fetchMessages();\n  }, [])\n\n  //get auth user\n  useEffect(() => {\n    const getMyId = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      setMyId(userInfo.attributes.sub);\n    }\n    getMyId();\n  }, [])\n\n\n  useEffect(() => {\n    const subscription = API.graphql(\n      graphqlOperation(onCreateMessage)\n    ).subscribe({\n      next: (data) => {\n        const newMessage = data.value.data.onCreateMessage;\n\n        if (newMessage.chatRoomID !== route.params.id) {\n          console.log(\"Message is in another room!\")\n          return;\n        }\n\n        //when suscribe fetchmessages\n        fetchMessages();\n      }\n    });\n\n    //unsuscribe when leave screen\n    return () => subscription.unsubscribe();\n  }, [])\n\n  return (\n    <ImageBackground style={{width: '100%', height: '100%'}} source={BG}>\n      <FlatList\n        data={messages}\n        renderItem={({ item }) => <ChatMessage myId={myId} message={item} />}\n        inverted\n      />\n      <InputBox chatRoomID={route.params.id} />\n    </ImageBackground>\n  );\n}\n\nexport default ChatRoomScreen;\n"]},"metadata":{},"sourceType":"module"}