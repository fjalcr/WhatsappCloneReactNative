{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/frontend/Documents/clones/native/WhatsappCloneReactNative/components/ChatListItem/index.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Auth } from 'aws-amplify';\n\nvar ChatListItem = function ChatListItem(props) {\n  var chatRoom = props.chatRoom;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      otherUser = _useState2[0],\n      setOtherUser = _useState2[1];\n\n  var navigation = useNavigation();\n  useEffect(function () {\n    var getOtherUser = function getOtherUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getOtherUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n\n              if (chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub) {\n                setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n              } else {\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getOtherUser();\n  }, []);\n\n  var onClick = function onClick() {\n    navigation.navigate('ChatRoom', {\n      id: chatRoom.id,\n      name: otherUser.name\n    });\n  };\n\n  if (!otherUser) {\n    return null;\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: onClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.lefContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: otherUser.imageUri\n    },\n    style: styles.avatar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.midContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.username,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, otherUser.name), React.createElement(Text, {\n    numberOfLines: 2,\n    style: styles.lastMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, chatRoom.lastMessage ? chatRoom.lastMessage.user.name + \": \" + chatRoom.lastMessage.content : \"\"))), React.createElement(Text, {\n    style: styles.time,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\"))));\n};\n\nexport default ChatListItem;","map":{"version":3,"sources":["/Users/frontend/Documents/clones/native/WhatsappCloneReactNative/components/ChatListItem/index.tsx"],"names":["React","useEffect","useState","styles","moment","useNavigation","Auth","ChatListItem","props","chatRoom","otherUser","setOtherUser","navigation","getOtherUser","currentAuthenticatedUser","userInfo","chatRoomUsers","items","user","id","attributes","sub","onClick","navigate","name","container","lefContainer","uri","imageUri","avatar","midContainer","username","lastMessage","content","time","createdAt","format"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;;;AAQA,OAAOC,MAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SACEC,IADF,QAEO,aAFP;;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA8B;AAAA,MACzCC,QADyC,GAC5BD,KAD4B,CACzCC,QADyC;;AAAA,kBAEdP,QAAQ,CAAC,IAAD,CAFM;AAAA;AAAA,MAEzCQ,SAFyC;AAAA,MAE9BC,YAF8B;;AAIjD,MAAMC,UAAU,GAAGP,aAAa,EAAhC;AAEAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACIP,IAAI,CAACQ,wBAAL,EADJ;;AAAA;AACbC,cAAAA,QADa;;AAEnB,kBAAIN,QAAQ,CAACO,aAAT,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,IAAhC,CAAqCC,EAArC,KAA4CJ,QAAQ,CAACK,UAAT,CAAoBC,GAApE,EAAyE;AACvEV,gBAAAA,YAAY,CAACF,QAAQ,CAACO,aAAT,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,IAAjC,CAAZ;AACD,eAFD,MAEO;AACLP,gBAAAA,YAAY,CAACF,QAAQ,CAACO,aAAT,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,IAAjC,CAAZ;AACD;;AANkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAQAL,IAAAA,YAAY;AACb,GAVQ,EAUN,EAVM,CAAT;;AAYA,MAAMS,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBV,IAAAA,UAAU,CAACW,QAAX,CAAoB,UAApB,EAAgC;AAC9BJ,MAAAA,EAAE,EAAEV,QAAQ,CAACU,EADiB;AAE9BK,MAAAA,IAAI,EAAEd,SAAS,CAACc;AAFc,KAAhC;AAID,GALD;;AAOA,MAAI,CAACd,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,SACE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEY,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEnB,MAAM,CAACsB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtB,MAAM,CAACuB,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAEjB,SAAS,CAACkB;AAAjB,KAAf;AAA4C,IAAA,KAAK,EAAEzB,MAAM,CAAC0B,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE1B,MAAM,CAAC2B,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE3B,MAAM,CAAC4B,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BrB,SAAS,CAACc,IAAzC,CADF,EAEE,oBAAC,IAAD;AACE,IAAA,aAAa,EAAE,CADjB;AAEE,IAAA,KAAK,EAAErB,MAAM,CAAC6B,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGvB,QAAQ,CAACuB,WAAT,GACMvB,QAAQ,CAACuB,WAAT,CAAqBd,IAArB,CAA0BM,IADhC,UACyCf,QAAQ,CAACuB,WAAT,CAAqBC,OAD9D,GAEG,EALN,CAFF,CAHF,CADF,EAiBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE9B,MAAM,CAAC+B,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzB,QAAQ,CAACuB,WAAT,IAAwB5B,MAAM,CAACK,QAAQ,CAACuB,WAAT,CAAqBG,SAAtB,CAAN,CAAuCC,MAAvC,CAA8C,YAA9C,CAD3B,CAjBF,CADF,CADF;AAyBD,CAtDD;;AAwDA,eAAe7B,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n  View,\n  Text,\n  Image,\n  TouchableWithoutFeedback\n} from \"react-native\";\nimport { ChatRoom } from \"../../types\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  Auth,\n} from 'aws-amplify';\n\nexport type ChatListItemProps = {\n  chatRoom: ChatRoom;\n}\n\nconst ChatListItem = (props: ChatListItemProps) => {\n  const { chatRoom } = props;\n  const [ otherUser, setOtherUser] = useState(null);\n\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    const getOtherUser = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser();\n      if (chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub) {\n        setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n      } else {\n        setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n      }\n    }\n    getOtherUser();\n  }, [])\n\n  const onClick = () => {\n    navigation.navigate('ChatRoom', {\n      id: chatRoom.id,\n      name: otherUser.name,\n    })\n  }\n\n  if (!otherUser) {\n    return null;\n  }\n\n  return (\n    <TouchableWithoutFeedback onPress={onClick}>\n      <View style={styles.container}>\n        <View style={styles.lefContainer}>\n          <Image source={{ uri: otherUser.imageUri }} style={styles.avatar}/>\n\n          <View style={styles.midContainer}>\n            <Text style={styles.username}>{otherUser.name}</Text>\n            <Text\n              numberOfLines={2}\n              style={styles.lastMessage}>\n              {chatRoom.lastMessage\n                ? `${chatRoom.lastMessage.user.name}: ${chatRoom.lastMessage.content}`\n                : \"\"}\n            </Text>\n          </View>\n\n        </View>\n\n        <Text style={styles.time}>\n          {chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  )\n};\n\nexport default ChatListItem;\n"]},"metadata":{},"sourceType":"module"}